import got from 'got';
import http from 'http';
import { readFile } from 'fs';
import { promisify } from 'util';
import Docker from 'dockerode';
import parseSAMTemplate from './src/parseSAMTemplate';
import createController from './src/controller';
import createDockerService from './src/dockerService';
import { parseFunctionsFromTemplate } from './src/serverlessFunctions';

const encoding = 'utf-8';
const readFileAsync = promisify(readFile);
const PORT = Number(process.env.PORT);

const getRequiredDependencies = async () => {
  const [envVarsString, templateYaml] = await Promise.all([
    readFileAsync(process.env.ENV_VARS_PATH, encoding),
    readFileAsync(process.env.TEMPLATE_PATH, encoding),
  ]);

  const envVars = JSON.parse(envVarsString);
  const template = await parseSAMTemplate(templateYaml);

  return { envVars, template };
};

const prepareEnvironment = async (dockerService) => {
  await Promise.all([
    dockerService.removeOldContainers(),
    dockerService.pullRequiredDockerImages(),
  ]);

  await dockerService.createContainers();
};

const getEndpoints = (functions) => functions
  .map(({ method, path }) => ({ method: method.toUpperCase(), path: path.full }));

const spinUpServer = (functions) => {
  const server = http.createServer();
  const controller = createController(got, functions);

  server.on('request', controller);

  server.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
    console.log('The following endpoints are exposed:');
    console.table(getEndpoints(functions));
    const cleanUpCommand = `docker rm -f $(docker ps -a -f label=aws-sam-api-proxy.api=${process.env.API_NAME} -q)`;
    console.log(`For removing all containers generated by this script, run the following command - "${cleanUpCommand}"`);
  });
};

async function go() {
  try {
    const docker = new Docker();
    const dockerStatus = await docker.ping();
    if (dockerStatus.toString() !== 'OK') throw new Error('Docker must be running');

    const { template, envVars } = await getRequiredDependencies();
    const portOffset = PORT + 1;
    const functions = parseFunctionsFromTemplate(template, envVars, portOffset);
    const dockerService = createDockerService(docker, functions);

    await prepareEnvironment(dockerService);

    spinUpServer(functions);
  } catch (err) {
    console.log(err);
  }
}

go();
